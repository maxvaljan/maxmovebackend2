// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings       Booking[] // Relation to Booking
  customerOrders Order[]   @relation("CustomerOrders") // Relation to customer orders
  driverOrders   Order[]   @relation("DriverOrders") // Relation to driver orders
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  pickup    String
  dropoff   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id]) // Relation to user
}

model Order {
  id              Int         @id @default(autoincrement())
  customerId      Int
  driverId        Int?
  status          OrderStatus @default(PENDING)
  deliveryAddress String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           String // Can be JSON or a custom format
  totalPrice      Float

  // Relations
  customer User  @relation("CustomerOrders", fields: [customerId], references: [id])
  driver   User? @relation("DriverOrders", fields: [driverId], references: [id])

  deliveredAt DateTime?
}

enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}
